// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TcpProtocol.Define
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct S2C_START_GAME : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static S2C_START_GAME GetRootAsS2C_START_GAME(ByteBuffer _bb) { return GetRootAsS2C_START_GAME(_bb, new S2C_START_GAME()); }
  public static S2C_START_GAME GetRootAsS2C_START_GAME(ByteBuffer _bb, S2C_START_GAME obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public S2C_START_GAME __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Mynum { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public TcpProtocol.Define.CARD? Mydeck(int j) { int o = __p.__offset(6); return o != 0 ? (TcpProtocol.Define.CARD?)(new TcpProtocol.Define.CARD()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MydeckLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TcpProtocol.Define.S2C_START_GAME> CreateS2C_START_GAME(FlatBufferBuilder builder,
      int mynum = 0,
      VectorOffset mydeckOffset = default(VectorOffset)) {
    builder.StartTable(2);
    S2C_START_GAME.AddMydeck(builder, mydeckOffset);
    S2C_START_GAME.AddMynum(builder, mynum);
    return S2C_START_GAME.EndS2C_START_GAME(builder);
  }

  public static void StartS2C_START_GAME(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMynum(FlatBufferBuilder builder, int mynum) { builder.AddInt(0, mynum, 0); }
  public static void AddMydeck(FlatBufferBuilder builder, VectorOffset mydeckOffset) { builder.AddOffset(1, mydeckOffset.Value, 0); }
  public static VectorOffset CreateMydeckVector(FlatBufferBuilder builder, Offset<TcpProtocol.Define.CARD>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMydeckVectorBlock(FlatBufferBuilder builder, Offset<TcpProtocol.Define.CARD>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMydeckVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TcpProtocol.Define.S2C_START_GAME> EndS2C_START_GAME(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TcpProtocol.Define.S2C_START_GAME>(o);
  }
};


}
