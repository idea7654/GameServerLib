// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TcpProtocol.Define
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CARD : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CARD GetRootAsCARD(ByteBuffer _bb) { return GetRootAsCARD(_bb, new CARD()); }
  public static CARD GetRootAsCARD(ByteBuffer _bb, CARD obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CARD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Shape { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShapeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetShapeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetShapeArray() { return __p.__vector_as_array<byte>(4); }
  public int Num { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<TcpProtocol.Define.CARD> CreateCARD(FlatBufferBuilder builder,
      StringOffset shapeOffset = default(StringOffset),
      int num = 0) {
    builder.StartTable(2);
    CARD.AddNum(builder, num);
    CARD.AddShape(builder, shapeOffset);
    return CARD.EndCARD(builder);
  }

  public static void StartCARD(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddShape(FlatBufferBuilder builder, StringOffset shapeOffset) { builder.AddOffset(0, shapeOffset.Value, 0); }
  public static void AddNum(FlatBufferBuilder builder, int num) { builder.AddInt(1, num, 0); }
  public static Offset<TcpProtocol.Define.CARD> EndCARD(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TcpProtocol.Define.CARD>(o);
  }
};


}
